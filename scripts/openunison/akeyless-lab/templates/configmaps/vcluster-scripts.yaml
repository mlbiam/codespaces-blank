apiVersion: v1
kind: ConfigMap
metadata:
  name: vcluster-scripts
  namespace: {{ .Release.Namespace }}
data:
  kubernetes-dashboard-values.yaml: |-
    nginx:
      enabled: false

    kong:
      enabled: false

    api:
      scaling:
        replicas: 1
      containers:
        ports:
        - name: api-tls
          containerPort: 8000
          protocol: TCP

    web:
      scaling:
        replicas: 1
      containers:
        ports:
        - name: api-tls
          containerPort: 8000
          protocol: TCP

    auth:
      scaling:
        replicas: 0

  deploy-vcluster.sh: |-
    vcluster create $VCLUSTER_NAME --upgrade -f  /etc/openunison/vcluster-values.yaml  -n $VCLUSTER_NAME --connect=false
    while [[ $(kubectl get pods -l vcluster.loft.sh/namespace=kube-system -n $VCLUSTER_NAME -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for vcluster clusterdns pod" && sleep 1; done
    sleep 60
    kubectl create configmap deploymentcomplete -n $VCLUSTER_NAME

  run-helm.sh: |-
    #kubectl create ns vault
    #helm install vault hashicorp/vault --namespace vault --set global.externalVaultAddr=https://vault.apps.{{ .Values.vcluster.ip }}.nip.io/ --set injector.enabled=true

  deploy-vault-client.sh: |-
    export PATH=$PATH:~/.krew/bin
    helm repo add hashicorp https://helm.releases.hashicorp.com 
    helm repo update


    kubectl config set-cluster controlplane --server=https://kubernetes.default.svc:443 --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    kubectl config set-credentials controlplane --token=/var/run/secrets/kubernetes.io/serviceaccount/token
    kubectl config set-context controlplane --user=controlplane --user=controlplane

    vcluster connect $VCLUSTER_NAME  -n $VCLUSTER_NAME -- bash /scripts/run-helm.sh

  onboard-dashboard.sh: |-
    #!/bin/bash

    export PATH=$PATH:~/.krew/bin

    export VCLUSTER_CTX=$(kubectl ctx)

    echo "VCluster context: $VCLUSTER_CTX"

    helm repo add tremolo $TREMOLO_HELM_REPO
    helm repo add kubernetes-dashboard $K8S_DASHBOARD_HELM_REPO
    helm repo update

    kubectl ctx

    kubectl config set-cluster controlplane --server=https://kubernetes.default.svc:443 --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    kubectl config set-credentials controlplane --token=/var/run/secrets/kubernetes.io/serviceaccount/token
    kubectl config set-context controlplane --user=controlplane --user=controlplane

    kubectl ctx $VCLUSTER_CTX

    kubectl ctx

    kubectl create ns kubernetes-dashboard
    helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard   --set settings.clusterName=$VCLUSTER_LABEL --set settings.itemsPerPage=15 -f /scripts/kubernetes-dashboard-values.yaml  -n kubernetes-dashboard --wait --wait-for-jobs

    helm repo add external-secrets https://charts.external-secrets.io
    helm upgrade --install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace --wait --wait-for-jobs

    #while [[ $(kubectl get pods -l app.kubernetes.io/name=external-secrets-webhook -n external-secrets -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for external-secrets webhook" && sleep 1; done
    #while [[ $(kubectl get pods -l app.kubernetes.io/name=external-secrets -n external-secrets -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for external-secrets controller" && sleep 1; done
    #while [[ $(kubectl get pods -l app.kubernetes.io/name=external-secrets-cert-controller -n external-secrets -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for external-secrets certbot" && sleep 1; donehelm upgrade --install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace

    kubectl ctx controlplane
    kubectl create configmap deploymentcomplete -n $VCLUSTER_LABEL